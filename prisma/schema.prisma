// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  password              String
  name                  String?
  role                  String        @default("user")
  accounts              Account[]
  sessions              Session[]
  subscriptions         Subscription[]
  reminders             Reminder[]
  notifications         Notification[]
  categories            Category[]
  emailVerified         Boolean       @default(false)
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                  String        @id @default(cuid())
  name                String
  description         String?
  price               Float
  billingCycle        String        @default("monthly") // monthly, quarterly, annual, custom
  startDate           DateTime
  endDate             DateTime?
  trialEndDate        DateTime?
  autoRenew           Boolean       @default(true)
  userId              String
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminders           Reminder[]
  categoryId          String?
  category            Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  status              String        @default("active") // active, cancelled, expired, trial
  logo                String?
  website             String?
  cancellationUrl     String?
  notes               String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model Reminder {
  id              String        @id @default(cuid())
  subscriptionId  String
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  date            DateTime      
  sent            Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([userId])
}

model Notification {
  id              String        @id @default(cuid())
  type            String        // "reminder", "info", etc.
  title           String
  message         String
  read            Boolean       @default(false)
  createdAt       DateTime      @default(now())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CancellationGuide {
  id              String        @id @default(cuid())
  serviceName     String        @unique
  steps           String        // JSON string of steps
  url             String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SystemSettings {
  id                      String  @id @default(cuid())
  enableEmailNotifications Boolean @default(true)
  enableTrialEndReminders  Boolean @default(true)
  defaultReminderDays      Int     @default(3)
  maxSubscriptionsPerUser  Int     @default(50)
  maintenanceMode          Boolean @default(false)
}

model Category {
  id          String        @id @default(cuid())
  name        String        
  description String?
  color       String?
  icon        String?
  isDefault   Boolean       @default(false)
  userId      String?
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  subscriptions Subscription[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
} 